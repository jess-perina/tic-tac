{"version":3,"sources":["Components/Header/Header.js","lib/ticTac.js","Components/Square/Square.js","Components/Board/Board.js","Components/Modals/AlertModal.js","Components/PlayerModeButton/PlayerModeButton.js","Components/WhoStartsButton/WhoStartsButton.js","Components/GameModeButton/GameModeButton.js","Components/ResetButton/ResetButton.js","Components/MovesList/MovesList.js","Components/MasterGame/MasterGame.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","data-target","internal","square","b","c","board","options","i","length","push","winner","moves","depth","score","hasOwnProperty","bestMove","bestScore","Infinity","ticTac","minMax","player","availableMoves","this","calculateWinner","move","index","g","squares","tie","_i","_winningSets","set","_set","Object","slicedToArray","Square","_ref","value","onClick","type","Board","_this","Components_Square_Square","key","props","j","renderSquare","renderBoard","Component","AlertModal","reset","id","PlayerModeButton","setSinglePlayer","setTwoPlayer","WhoStartsButton","dropdown","document","querySelectorAll","M","Dropdown","init","inDuration","outDuration","hover","coverTrigger","starts","setHumanStart","setComputerStart","GameModeButton","practiceMode","setPractice","setSerious","ResetButton","resetGame","MovesList","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","lastMove","stepNumber","xIsNext","computerIsX","isPracticeMode","isSinglePlayer","AutoInit","nextProps","nextState","computerPiece","slice","AIMove","makeAIMoves","beginingOfGame","updateBoard","setState","prevState","concat","step","Modal","getInstance","querySelector","open","isGameStart","status","_this2","current","playerMode","whoStarts","map","desc","jumpTo","Components_PlayerModeButton_PlayerModeButton","WhoStartsButton_WhoStartsButton","GameModeButton_GameModeButton","setPracticeMode","setSeriousMode","ResetButton_ResetButton","Board_Board","handleClick","Components_MovesList_MovesList","Modals_AlertModal","App","Components_Header_Header","MasterGame_Game","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4efea1a0.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper red darken-4\">\n        <a href=\"#!\" className=\"brand-logo center\">Tic-Tac-Toe</a>\n        <a\n          data-target=\"modal2\"\n          className=\"btn-floating halfway-fab waves-effect waves-light deep-orange accent-3 modal-trigger\"\n          href=\"#modal2\">\n          <i className=\"material-icons\">info_outline</i>\n        </a>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header\n","let internal = {\n  squareIsOccupied(square) {\n    return square === 'X' || square === 'O' || false\n  },\n\n  setIsEqual(a, b, c) {\n    return a === b && a === c\n  },\n\n  setContainsNull(a, b, c) {\n    return a === null || b === null || c === null\n  },\n\n  possibleMoves(board) {\n    let options = []\n    for (var i = 0; i < board.length; i++) {\n      if (board[i] === null) {\n        options.push(i)\n      }\n    }\n    return options\n    // return board.filter((s, index ) => {\n    //   if (s === null) return index\n    // })\n  },\n\n  setScore(winner, moves, depth) {\n    if (winner === 'X') {\n      return {score: -10 + depth}\n    } else if (winner === 'O') {\n      return {score: 10 - depth}\n    } else if (moves.length === 0) {\n      return {score: 0}\n    } else {\n      return {}\n    }\n  },\n\n  scoreExists(score) {\n    return score.hasOwnProperty('score')\n  },\n\n  findBestMoveForO(moves) {\n    let bestMove\n    let bestScore = -Infinity\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score > bestScore) {\n        bestScore = moves[i].score\n        bestMove = i\n      }\n    }\n    return bestMove\n  },\n\n  findBestMoveForX(moves) {\n    let bestMove\n    let bestScore = Infinity\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i].score < bestScore) {\n        bestScore = moves[i].score\n        bestMove = i\n      }\n    }\n    return bestMove\n  }\n}\n\nconst ticTac = {\n  minMax(board, player, depth) {\n    depth++\n    const availableMoves = internal.possibleMoves(board)\n    const winner = this.calculateWinner(board)\n    const score = internal.setScore(winner, availableMoves, depth)\n    if (internal.scoreExists(score)) {\n      return score\n    }\n\n    let moves = []\n    for (let i = 0; i < availableMoves.length; i++) {\n      let move = []\n      move.index = availableMoves[i]\n      board[availableMoves[i]] = player\n\n      if (player === 'O') {\n        let g = this.minMax(board, 'X', depth)\n        move.score = g.score\n      } else {\n        let g = this.minMax(board, 'O', depth)\n        move.score = g.score\n      }\n      board[availableMoves[i]] = null\n      moves.push(move)\n    }\n\n    let bestMove\n    if (player === 'O') {\n      bestMove = internal.findBestMoveForO(moves)\n    } else {\n      bestMove = internal.findBestMoveForX(moves)\n    }\n    return moves[bestMove]\n  },\n\n  calculateWinner(squares) {\n    const winningSets = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    let tie = 'Tie';\n    for (let set of winningSets) {\n      const [a, b, c] = set;\n      if (internal.squareIsOccupied(squares[a]) && internal.setIsEqual(squares[a], squares[b], squares[c])) {\n        return squares[a]\n      } else if (internal.setContainsNull(squares[a], squares[b], squares[c])){\n        tie = '';\n      }\n    }\n    return tie || null;\n  }\n}\n\nexport { ticTac, internal }\n","import React from 'react';\n\nconst Square = ({ value, onClick }) => {\n  return (\n    <button type=\"button\" className=\"square cyan-text text-darken-4\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default Square;\n","import React, { Component } from 'react';\nimport Square from '../Square/Square';\n\nexport default class Board extends Component {\n  renderSquare(i) {\n    return (\n      <Square\n        key={i}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  renderBoard() {\n    let board = [];\n    for (let i = 0; i < 3; i++) {\n      let squares = [];\n      for (let j = 0; j < 3; j++) {\n        squares.push(this.renderSquare(i + j + (i * 2)))\n      }\n      board.push(<div className=\"board-row\" key={i}>{squares}</div>)\n    }\n    return board\n  }\n\n  render() {\n    return (\n      <div className=\"game-container\">\n        {this.renderBoard()}\n      </div>\n    );\n  }\n}\n","import React from 'react'\n\nconst AlertModal = ({ reset }) => {\n  return (\n    <div>\n      <div id=\"modal1\" className=\"modal\">\n        <div className=\"modal-content\">\n          <h5>reset current game to change options</h5>\n        </div>\n        <div className=\"modal-footer\">\n          <a href=\"#!\" className=\"modal-close waves-effect waves-green btn-flat\">CANCEL</a>\n          <a href=\"#!\" className=\"modal-close waves-effect waves-green btn-flat\" onClick={reset} >RESET</a>\n        </div>\n      </div>\n\n      <div id=\"modal2\" className=\"modal\">\n        <div className=\"modal-content\">\n          <h5>Game Rules</h5>\n        </div>\n        <div className=\"modal-footer\">\n          <a href=\"#!\" className=\"modal-close waves-effect waves-green btn-flat\">OK</a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AlertModal\n","import React from 'react';\n\nconst  PlayerModeButton = ({player, setSinglePlayer, setTwoPlayer}) => {\n  return (\n    <div className=\"player-mode mode-btn \">\n      <span className=\"card-title\">Change Player Mode</span>\n      <a className=\"dropdown-trigger btn\" href=\"#!\" data-target=\"player-mode\">{player}</a>\n      <ul id=\"player-mode\" className=\"dropdown-content\">\n        <li onClick={setSinglePlayer}>\n          <a href=\"#!\">Single Player</a>\n        </li>\n        <li onClick={setTwoPlayer}>\n          <a href=\"#!\">Two Player</a>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default PlayerModeButton\n","import React, { Component } from 'react'\nimport M from 'materialize-css';\n\nexport default class WhoStartsButton extends Component {\n  componentDidMount() {\n    let dropdown = document.querySelectorAll('.dropdown-trigger')\n    let options = {\n      inDuration: 300,\n        outDuration: 300,\n        hover: true, // Activate on hover\n        coverTrigger: false\n    }\n    M.Dropdown.init(dropdown, options)\n    // M.AutoInit()\n  }\n\n  render() {\n    return (\n      <div className=\"mode-btn\">\n        <span className=\"card-title\">Who Starts</span>\n        <a className=\"dropdown-trigger btn\" href=\"#!\" data-target=\"start-toggle\">{this.props.starts}</a>\n        <ul id=\"start-toggle\" className=\"dropdown-content\">\n          <li onClick={this.props.setHumanStart}>\n            <a href=\"#!\">You</a>\n          </li>\n          <li onClick={this.props.setComputerStart}>\n            <a href=\"#!\">Computer</a>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport M from 'materialize-css';\n\nexport default class GameModeButton extends Component {\n  componentDidMount() {\n    let dropdown = document.querySelectorAll('.dropdown-trigger')\n    let options = {\n      inDuration: 300,\n        outDuration: 300,\n        hover: true, // Activate on hover\n        coverTrigger: false\n    }\n    M.Dropdown.init(dropdown, options)\n    // M.AutoInit()\n  }\n\n  render() {\n    return (\n      <div>\n        <span className=\"card-title\">Change Game Mode</span>\n        <a className=\"dropdown-trigger btn\" href=\"#!\" data-target=\"practice-toggle\">{this.props.practiceMode}</a>\n        <ul id=\"practice-toggle\" className=\"dropdown-content\">\n          <li onClick={this.props.setPractice}>\n            <a href=\"#!\">Practice</a>\n          </li>\n          <li onClick={this.props.setSerious}>\n            <a href=\"#!\">Serious</a>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nfunction ResetButton(props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"reset-btn btn waves-effect waves-light\" onClick={() => props.resetGame()}>Reset Game\n    </button>\n  )\n}\n\nexport default ResetButton\n","import React from 'react'\n\nconst MovesList = ({ moves }) => {\n  return (\n    <ul className=\"collection\">{moves}</ul>\n  )\n}\n\nexport default MovesList\n","import React, { Component } from 'react';\nimport M from 'materialize-css';\nimport { ticTac } from '../../lib/ticTac'\nimport './MasterGame.css';\nimport Board from '../Board/Board';\nimport AlertModal from '../Modals/AlertModal'\nimport PlayerModeButton from '../PlayerModeButton/PlayerModeButton'\nimport WhoStartsButton from '../WhoStartsButton/WhoStartsButton'\nimport GameModeButton from '../GameModeButton/GameModeButton'\nimport ResetButton from '../ResetButton/ResetButton';\nimport MovesList from '../MovesList/MovesList';\n\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          lastMove: ''\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      computerIsX: false,\n      isPracticeMode: true,\n      isSinglePlayer: true\n    };\n  }\n\n  componentDidMount() {\n    M.AutoInit()\n    let dropdown = document.querySelectorAll('.dropdown-trigger')\n    let options = {\n      inDuration: 300,\n        outDuration: 300,\n        hover: true, // Activate on hover\n        coverTrigger: false\n    }\n    M.Dropdown.init(dropdown, options)\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const computerPiece = this.state.computerIsX ? 'X' : 'O'\n    const squares = nextState.history[nextState.history.length - 1].squares.slice()\n    const AIMove = ticTac.minMax(squares, computerPiece, 0).index\n\n    this.makeAIMoves(nextState, AIMove)\n    return true\n  }\n\n  makeAIMoves(nextState, AIMove) {\n    if (!this.state.isSinglePlayer) {\n      return\n    }\n    if (this.beginingOfGame(nextState)) {\n      if (nextState.computerIsX && this.state.xIsNext) {\n        this.updateBoard(AIMove)\n        return\n      }\n    }\n\n    if (!this.beginingOfGame(nextState)) {\n      if (!this.state.computerIsX && this.state.xIsNext) { //Player goes first with X\n        this.updateBoard(AIMove)\n      } else if (this.state.computerIsX && !this.state.xIsNext) { //Computer goes first with X\n        this.updateBoard(AIMove)\n      }\n    }\n  }\n\n  beginingOfGame(nextState) {\n    return nextState.stepNumber === 0\n  }\n\n  handleClick(i) {\n    this.updateBoard(i)\n  }\n\n  updateBoard(i) {\n    this.setState(prevState => {\n      const history = prevState.history.slice(0, prevState.stepNumber + 1)\n      const current = history[history.length - 1]\n      const squares = current.squares.slice()\n\n      if (ticTac.calculateWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = prevState.xIsNext ? 'X' : 'O';\n\n      return ({\n        history: history.concat([\n          {\n            squares: squares,\n            lastMove: `${squares[i]} to space ${i}`\n          }\n        ]),\n        stepNumber: history.length,\n        xIsNext: !prevState.xIsNext\n      });\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  isGameStart(state) {\n    if (state.history.length > 1) {\n      let alert = M.Modal.getInstance(document.querySelector('.modal'))\n      alert.open()\n      return false\n    }\n    return true\n  }\n\n  setSinglePlayer() {\n    if (!this.isGameStart(this.state)) return\n    this.setState(() => {\n      return {isSinglePlayer: true}\n    });\n  }\n\n  setTwoPlayer() {\n    if (!this.isGameStart(this.state)) return\n    this.setState(() => {\n      return {isSinglePlayer: false}\n    });\n  }\n\n  setComputerStart() {\n    if (!this.isGameStart(this.state)) return\n    this.setState(() => {\n        return {computerIsX: true}\n    });\n  }\n\n  setHumanStart() {\n    if (!this.isGameStart(this.state)) return\n    this.setState(() => {\n        return {computerIsX: false}\n    });\n  }\n\n  setPracticeMode() {\n    if (!this.isGameStart(this.state)) return\n    this.setState(() => {\n      return {isPracticeMode: true}\n    });\n  }\n\n  setSeriousMode() {\n    this.setState(() => {\n      return {isPracticeMode: false}\n    });\n  }\n\n  resetGame() {\n    this.setState({\n      history: [{squares: Array(9).fill(null)}],\n      stepNumber: 0,\n      xIsNext: true,\n      computerIsX: false\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = ticTac.calculateWinner(current.squares);\n    const playerMode = this.state.isSinglePlayer ? 'Single Player' : 'Two Player';\n    const practiceMode = this.state.isPracticeMode ? 'Practice' : 'Serious';\n    const whoStarts = this.state.computerIsX ? 'Computer' : 'You'\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        `Go to move #${move} (${step.lastMove})` :\n        'Go to game start';\n\n      return (\n        <li key={step.lastMove} className=\"collection-item teal accent-4\">\n          <button type=\"button\" className=\"btn-small waves-effect waves-light\" onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <div className=\"card small valign-wrapper teal darken-1\">\n              <div className=\"card-content white-text\">\n                <PlayerModeButton\n                  player={playerMode}\n                  setSinglePlayer={() => this.setSinglePlayer()}\n                  setTwoPlayer={() => this.setTwoPlayer()}\n                />\n\n                {this.state.isSinglePlayer\n                  ? (<WhoStartsButton\n                      starts={whoStarts}\n                      setHumanStart={() => this.setHumanStart()}\n                      setComputerStart={() => this.setComputerStart()}\n                    />)\n                  : (<GameModeButton\n                      practiceMode={practiceMode}\n                      setPractice={() => this.setPracticeMode()}\n                      setSerious={() => this.setSeriousMode()}\n                    />)\n                }\n\n                <ResetButton resetGame={() => this.resetGame()} />\n              </div>\n            </div>\n          </div>\n          <div className=\"col s12 m6\">\n            <div className=\"card small valign-wrapper teal darken-1\">\n              <div className=\"card-content white-text\">\n                <span className=\"card-title\">{status}</span>\n                <div>\n                  <Board\n                    squares={current.squares}\n                    onClick={i => this.handleClick(i)}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {this.state.isPracticeMode && !this.state.isSinglePlayer\n          ? ( <div className=\"row\">\n                <div className=\"col s12\">\n                  <div className=\"card valign-wrapper teal darken-1\">\n                    <div className=\"card-content white-text\">\n                      <MovesList moves={moves} />\n                    </div>\n                  </div>\n                </div>\n              </div>)\n          : null\n        }\n\n        <AlertModal reset={() => this.resetGame()} />\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../Header/Header'\nimport MasterGame from '../MasterGame/MasterGame';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Header />\n        </header>\n        <div className=\"cyan darken-4\">\n          <MasterGame />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'materialize-css/dist/css/materialize.min.css'\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}